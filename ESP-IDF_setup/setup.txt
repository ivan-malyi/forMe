

В данной статье мы настроим среду разработки ESP-IDF, которую заранее интегрировали в VS Code (см также статью по установке и настройке компиляторов gcc/g++ for Windows).
Предворительно уясним, что мы будем выполнять все шаги под ОС Windows, и что мы заранее установили компиляторы gcc/g++ - это важно, ведь СMake не предусматривает то что у вас нет 
компилятора и не заботится его установкой. 



CMake 
    Сейчас. пожалуй, самое время проговорить зачем нам нужен CMake? 
        ESP-IDF использует CMake для управления процессом сборки. Он отвечает за генерацию файлов сборки и управляет зависимостями проекта.



Python 
    Также, помимо сборщика, в виде CMake, мы должны иметь на компьютере Python.
    ESP-IDF активно использует Python-скрипты для генерации конфигурационных файлов, управления сборкой, прошивки устройства и других операций.
    Python также используется для утилит, таких как esptool.py (прошивка микроконтроллера) и idf.py (основная утилита для управления проектами ESP-IDF).




Дополнительные компоненты
    Кроме CMake и Python, ESP-IDF требует других инструментов, которые также автоматически устанавливаются через мастер настройки:
        * Ninja — для быстрой сборки проектов.
        * Git — для работы с репозиторием ESP-IDF и управления зависимостями.
        * ESP-IDF Tools — включают необходимые утилиты и драйверы для работы с микроконтроллерами ESP32.




Установка CMake и Python 
    Для начала следует установить - самое важное для ESP-IDF.
    Для этого переходим на соответсвующие сайты: 
        https://cmake.org/download/ - устанавливаем подходящую под свой компьютер версию 
        https://www.python.org/downloads/ - нажимаем "Downloads" и затем нам автоматически подберет нужную нам версию и мы ее устанавливаем  

    С CMake все легко и он устанавливается без проблем, главное не забудьте проверить успешность установки, путем команды в вашей Windows-консоли: 
        cmake --version 
        ** должно выдать версию **

    С Python все немного сложнее, если мы открываем .exe Python-файл, а там три колонки:  Modify, Repair, Uninstall - это значит, что Python уже установлен, проверим той же 
    командой: 
        python --version 
        ** должно выдать версию **

    Если вам выбивает обычный установочный-интерфейс - вам нужно его пройти и тогда у вас при следующем заходе в программу будет, то что я описал ранее. Не забудьте выполнить 
    команду-версии в консоли.

    После проверим установлен ли у нас pip: 
        pip --version 
        ** должно выдать версию **

    Если он не установлен - устанавливаем:
        1. Узнаем куда установлся python :
            >where python
                D:\compilate\msys64-compiler\ucrt64\bin\python.exe
                C:\Users\ivan.malyi\AppData\Local\Microsoft\WindowsApps\python.exe

        2. Устанавливаем pip :
            D:\compilate\msys64-compiler\ucrt64\bin\python.exe -m ensurepip


    Дальше следует перейти на сайт и придерживаться инструкций: 

        https://habr.com/ru/articles/530638/

    Следует все делать самостоятельно, устанавливать Ninja и прочие дерективы для работы - что не совсем удобно. 

    Поэтоуму давайте рассмотрим вариант - полегче, просто скачаем через офицальный сайт предложение.
        https://idf.espressif.com/

    На сайте мы можем выбрать какой серии микропроцессор, который мы будем программирвоать.
    Затем переходим по вкладке и устанавливаем загрузчик (я установил самый маленький по размеру) и затем через него устанвливаем основную программу среды разработки. 


    После окончательной установки у нас появится две консоли и дв вкладки на столе (ESP-IDF 5.3 CMD и ESP-IDF 5.3 PowerShell).
    Проверим в любой из двух консолей коректность установки idf.py :
        idf.py --version

    Дальше, если нам выдало версию - создаем новый прокт: 
        idf.py create-project my_first_project
    Перехожим в него : 
        cd my_first_project
    И можем настроить через специальное окно : 
        idf.py menuconfig

        Где : 

        Build type:
            Здесь можно выбрать, какой тип сборки использовать: Debug, Release и другие.
            Debug — для разработки, с включенной отладочной информацией.
            Release — для финальной версии, оптимизированной для производительности.
            
        Bootloader config:
            Настройки для загрузчика устройства. Загрузчик используется для первоначальной загрузки приложения на микроконтроллер.
            Обычно вам не нужно изменять эти параметры, если не требуется кастомизация загрузчика.

        Security features:
            Здесь настраиваются различные функции безопасности, такие как шифрование данных, проверка подлинности и др.
            Можно активировать или деактивировать использование криптографических функций.

        Application manager:
            Управление приложениями, например, настройка разделов памяти для различных приложений.
            Включает функции для работы с несколькими приложениями на одном устройстве.

        Serial flasher config:
            Настройки для загрузки прошивки на устройство через последовательный интерфейс (например, через USB).
            Обычно вам нужно настроить правильный порт и скорость для флеширования.

        Partition Table:
            Настройка таблицы разделов памяти устройства.
            Здесь можно определить, сколько памяти выделить под приложение, параметры, данные и другие компоненты. Обычно для большинства проектов стандартная таблица подойдет, 
            но если требуется особая настройка, здесь можно её изменить.

        Compiler options:
            Здесь можно настроить различные параметры компилятора: флаги оптимизации, варианты компиляции и т. д.
            В большинстве случаев можно оставить значения по умолчанию, но для определенных случаев нужно указать специфичные флаги.

        Component config:
            Эта секция предназначена для настройки различных компонентов, таких как драйвера, протоколы и другие зависимости.
            Здесь можно включить или отключить поддержку различных компонентов, таких как Wi-Fi, Bluetooth, драйвера датчиков и так далее.

        Make experimental features visible:
            Эта опция позволяет сделать доступными экспериментальные функции и возможности. Если вам нужно поработать с новыми или нестабильными фичами ESP-IDF, 
            можно активировать этот флаг.
            Обычно оставляется неактивированным, если вы не хотите работать с экспериментальными функциями.


    После настройки собираем проект :
        idf.py build


    Подключение устройства (ESP32):
        Подключите ваше устройство ESP32 к компьютеру через USB.
        Найдите порт, к которому подключено устройство (например, COM3 на Windows).

    Выполните команду для прошивки:
        idf.py -p COM3 flash
        Замените COM3 на соответствующий порт вашего устройства.