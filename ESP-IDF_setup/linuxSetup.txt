Настройка ESP-IDF для Linux


    Пожалуй данную обьяснительную (туториал) мне было наиболее приятно и удобно писать, ведь он пишется под мою любиму ОС -
    Arch (Artix) Linux, что для меня упрощает задчу вдвоем и сокращает время втрое, поскольку все выполняется в консоли, буквально 
    за несколько команд.


    1. Установка зависимостей
        Для начала установим все нужные нам зависимости, для коректной сброки ESP-IDF. Детальней о них вы можете почитать в интернете,
        либо же в части для Windows-установки ESP_IDF.

            sudo pacman -S --needed git gcc make cmake ninja python python-pip flex bison gperf libusb

    2. Установка ESP-IDF 
        Поскольку для ESP-IDF есть открытий репозиторий в Git - мы можем его попросту установить одной командой. 
        В моем примере я его устанвливаю в домашнюю директорию и перехожу в соответсвующую папку: 

            cd ~
            git clone --recursive https://github.com/espressif/esp-idf.git
            cd esp-idf

    3. Установка инструментов для ESP-IDF
        ESP-IDF поставляется с удобным скриптом install.sh, который автоматически установит компиляторы и другие необходимые утилиты:

            ./install.sh


    4. Настройте переменные окружения
        Чтобы использовать ESP-IDF, нужно настроить переменные окружения, чтобы он понимал откуда считывать файлы. 
        Давайте добавим это в файл конфигурации вашего shell (~/.bashrc для bash).

            export IDF_PATH="$HOME/esp-idf"
            export PATH="$HOME/.espressif/tools/xtensa-esp32-elf/bin:$PATH"
            source $IDF_PATH/export.sh

        После чего, не забудьте загрузить изменения с помощью команды : 
            source ~/.bashrc
        Либо же просто перезайдите в консоль.


    5. Настройка в IDE
        Я буду пистаь код в VS Code, поэтому буду писать относительно его настройки. 
        Нам дальше нужно перейти в VS Code и установить в предложениях (CTRL + Shif + X) ESP-IDF (интегрировнную в IDE среду разработки)
        и затем найти перезагрузить IDE и настроить переменные окружения внутри VS Code, чтобы библеотеки подтягивались - коректно.
        Для этого нажмите Ctrl+Shift+P и введите ESP-IDF: Configure ESP-IDF extension.

        После чего вам высветится окно с тремя колонками : 
            1.EXPRESS (Рекомендуется для быстрого старта)
                Этот вариант автоматизирует процесс настройки: плагин скачает и настроит ESP-IDF, инструменты и Python автоматически.
                Подходит, если вы еще не устанавливали ESP-IDF вручную.

            2.ADVANCED (Для более тонкой настройки)
                Этот режим позволяет вручную указать пути к ESP-IDF, инструментам и Python.
                Выбирайте этот вариант, если вы уже установили ESP-IDF и знаете, где находятся необходимые файлы.

            3.USE EXISTING SETUP (Использовать существующую установку)
                Подходит, если ESP-IDF уже настроен на вашей системе (например, вы вручную установили ESP-IDF и его зависимости).
                В этом случае мастер просто подключит существующую установку к плагину.

        Советую, для начала выбрать EXPRESS и не морочить голову. После чего мы пейдем к настройке зависимостей и путей ESP-IDF, где
        я выбрал установленные настройки, правда поменял немного путь в вехней колонке, потому что подсвечивало красным - непраивльно
        указан путь, а так если у вас все хорошо - просто можете оставлять так как есть.

        После чего нам прийдется заполнить несколько не сложных колонок и наш проект создан, поздравляю !!


    6. Перенастройка 
        Бывают случаи, когда мы неправильно настроили какие-то компоненты в нашей ESP-IDF и мы хотим это поменять. Например, если 
        вы непраивльно указали путь для "подтягивания" H-файлов, то в VS Code могут не отображаться базовые-файлы, такие как : 
            #include "freertos/FreeRTOS.h"
        И для устранение такой проблемы, зачастую требуется просто указать коректный путь, это можно сделать через изменение переменной 
        окружения "IDF_PATH", которая лежит в ./bashrc. 

        Если же нам нужно глобальные измененния правок - следует переустановить ESP-IDF, через команды, которые приводились ранее.


    
    7. Файлы конфигурации. Почему заголовочные ESP-IDF библеотеки не подтягиваются ? 
        Стоит так же затронить не мало важную деталь, насчет библиотек, которые мы будет позже подключать в свои проекты, среди самых 
        базовых и популярных это: 
            #include <freertos/FreeRTOS.h>
            #include <freertos/task.h>
            #include <freertos/queue.h>
            #include <freertos/semphr.h>
        Которые часто не находяться и нам следует понимать где они лежат и настроить путь самостоятельно. 
        Для этого перейдите в папку esp-idf (у меня она установленна в домашнюю директорию) и найдите там папку "components" - в ней 
        лежат все основные библиотеки, которыми мы будем пользовать. В директории freertos лежат нужные нам заголовочные файлы.
        Чтобы все коректно работало следует так же проследить за переменными окружения, и по надобости добавить их в /.bashrc, как 
        гооврилось ранее. 

        Vs Code, по умолчанию берет библиотеки с двух директорий: 
            /usr/include 
            /usr/lib
        Но тут, как мы видим нет нашей директории "esp-idf/components", поэтому ESP-IDF создает в каждом новом проекте конфируционных 
        файл "c_cpp_properties.json", где прописывает это за нас. Если у нас чего то нет - мы сначала смотрим есть ли вообще у нас 
        библиотека, а затем уже идем в файл c_cpp_properties.json и смотрим на пути. В путях часто конфигурирует записи, по типу: 
            idf.espIdfPath
            idf.port
            idf.toolsPath
        Эти переменные настраиваются нами при создании проекта и мы их можем посмотреть в файле нашего проекта "settings.json".

        После настройки я долго копался и не понимал, в чем причина почему у меня не подключаются заголовочные файлы и почему их 
        не находит: персмотрел несколько гайдов, изменял по разному конфируционные файлы (settings.json, c_cpp_properties.json и другие),
        перепроверял пути несколько раз, напрямую передавал эти пути Си-копилятору, но ничего не помогало. 
        Пока не пререшел на приимеры, которые предлагает ESP-IDF и не неачал их рассматривать и разбираться, почему там заголовочные файлы 
        корректно подтягиваются. 

        В итоге понял, что в примере, который мы создаем - указана совсем устарелая версия компилятора в файле "CMakeLists.txt", который 
        внутри папки нашего проекта (не main) в стоке: 
            cmake_minimum_required(VERSION 3.5) - 3.5 нигде из примеров не стоит, там стоит всегда 3.16 - поэтому нам стоит поменять и 
            сохранить и перезайти.  
        
