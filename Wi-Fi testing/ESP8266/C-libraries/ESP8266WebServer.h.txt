

Разбор Си-бибилиотеки, для абстракции от работы с Wi-Fi модулем (на ESP8266) -  <ESP8266WebServer.h>



Основные библиотекчные методы: 
    Библиотека ESP8266WebServer предоставляет методы для создания и управления веб-сервером на ESP8266. Вот основные методы, которые используются чаще всего:


    * server.begin()
        Что делает: Запускает веб-сервер. После вызова сервер начинает слушать входящие HTTP-запросы.


    * server.handleClient()
        Что делает: Обрабатывает входящие запросы. Этот метод должен вызываться в основном цикле loop() для проверки активности клиентов.


    * server.on()
        Что делает: Регистрирует обработчик для определённого маршрута и типа HTTP-запроса (например, GET, POST).

        Когда нам нужно прописать конкретный алгоритм, который должен делать сервер, при поступлении определённого запроса от клиента на определённый адрес сайта 
        - без метода ".on()" не обойтись. 
        У этого метода есть три аргумента: 
            1. path — строка, представляющая маршрут (URI), который будет обрабатываться сервером.
            2. method — метод HTTP-запроса (например, HTTP_GET, HTTP_POST, HTTP_PUT, и т. д.), указывающий на тип запроса.
            3. handler — функция, которая будет вызвана при поступлении соответствующего запроса.

        Пример:
            server.on("/", HTTP_GET, handleRoot); // Обработчик для GET-запросов на серверный кореневой адрес -  "/".
            server.on("/data", HTTP_POST, handleData); // Обработчик для POST-запросов серверный адрес "/data".

        Таким образом мы можем реагировать на определенные действия от клиента - если он обращается к корневому адресу сервера с запросом типа GET - делаем определенные
        действия, если на адрес сервера /data с запросом типа POST - делаем другие действия.


    * server.arg()
        Что делает: Извлекает данные, отправленные клиентом (например, параметры URL, тело запроса POST).
        

        Использование:
            Для GET-запросов: Позволяет получить параметры из строки запроса (например, ?key=value).
            Для POST-запросов: Возвращает данные тела запроса.

        Пример: Клиент отправляет POST-запрос с ключевой фразой "key". Мы должны извлечь её и отреагировать.
            String value = server.arg("key"); // Извлекает значение параметра "key".
            String body = server.arg("plain"); // Возвращает всё тело POST-запроса.


    * server.send()
        Что делает: Формирует и отправляет HTTP-ответ клиенту. Указывает код состояния, тип содержимого и данные ответа - т.е MIME-тип.

        MIME-тип определяет формат содержимого, которое сервер отправляет клиенту. Это как указание на то, как интерпретировать данные. 
        Например, в роли второго аргумента методу ".send()", мы можем передавать:
            * text/plain — это обычный текст.
            * text/html — HTML-документ (веб-страница).
            * application/json — данные в формате JSON.

        В качестве первого аргумента - обычно перается код исполнения (200 - все ок, 404 - ошибка и тд); В качестве третьего аргумента передается же 
        непосредсвенно само содержимое (текст или документ или картинка ).


        Пример:
            server.send(200, "text/plain", "Hello, world!");
            200 — HTTP-код состояния (успех).
            "text/plain" — MIME-тип содержимого (например, текст, HTML, JSON). 
            "Hello, world!" — Тело ответа.

            server.send(200, "text/html", "<h1>Welcome to my server</h1>");  // Пример отправки HTML-кода


    * server.uri()
        Что делает: Возвращает маршрут (URL), по которому был отправлен запрос клиентом.
        Это необходимо для того, чтобы знать точно, что клиент хочет получить или считать от сервера. Например, клиент вбивает в поисковик ссылку:
        "http://example.com/data", где : 
            * / — это корень сайта.
            * /data — это маршрут или страница, к которой ты обращаешься

        Пример:
            String route = server.uri(); // Получаем текущий маршрут, тут будет "/data" и мы потом сможем проанализировать это и отравить соответсующие данные клиенту 


    * server.hasArg()
        Что делает: Проверяет, содержит ли запрос определённый параметр. Можно использовать, как для GET так и для POST запросов.

        Пример:
            if (server.hasArg("key")) {
                String value = server.arg("key"); // Если есть, получить значение.
            }


    * server.method()
        Что делает: Возвращает HTTP-метод запроса (например, GET, POST).

        Пример:
            if (server.method() == HTTP_POST) {
                Serial.println("Received POST request");
            }


    * server.client()
        Что делает: Возвращает объект клиента (WiFiClient), который подключился к серверу. Позволяет напрямую работать с сокетами. 

        Метод .client() возвращает объект текущего клиента, который в данный момент подключен к серверу. Если клиентов несколько, каждый из них будет обработан отдельно, 
        и для каждого соединения будет создан свой объект WiFiClient.

        Основные методы объекта клиента:
            * .available() — проверяет, есть ли данные для чтения.
            * .read() — читает данные.
            * .write() — отправляет данные.
            * .stop() — закрывает соединение.

        Пример:
            WiFiClient client = server.client();  // Получаем текущего клиента
            if (client.available()) {
                String data = client.readString();
                Serial.println(data);
            }



    * server.close()
        Что делает: Останавливает веб-сервер. Новые запросы приниматься не будут.


    * server.setContentLength()
        Что делает: Устанавливает длину содержимого ответа, если она известна заранее (оптимизирует передачу данных). Если длина не соответствует ожиданиям -
        сервер не будет их обрезать, а просто выдаст ошибку.

        Пример:
            server.setContentLength(50); // Указываем, что тело ответа занимает 50 байт.


    * server.streamFile()
        Что делает: Позволяет отправлять большие файлы (например, изображения или текстовые файлы) клиенту.

        Метод .streamFile() используется для передачи больших файлов клиенту, таких как изображения или видео. 
        Он отправляет данные по частям, создавая поток, который клиент может постепенно считывать.

        Клиент будет считывать поток так же, как и с обычного HTTP-запроса, но, если это большие данные, процесс будет происходить по частям, а не за один раз.

        Используйте streamFile(), когда передаете большие файлы (например, изображения, видео), чтобы передача данных происходила по частям. 
        Метод ".send()" подходит для отправки небольших данных (например, текстовых или HTML-страниц).

        Пример:
            File file = SPIFFS.open("/data.txt", "r");
            server.streamFile(file, "text/plain");
            file.close();
