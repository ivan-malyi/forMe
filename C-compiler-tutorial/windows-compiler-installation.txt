Установка компилятора gcc/g++ на Windows 


	Когда мы установили VC Code - следующие что нам нужно сделать, чтобы Си(++)-код запустился и скомпелировался - это установить компилятор. На Windows этот процесс 	немного тяжелее, нежели на Linux (Arch) - там это занимает секунду
	времени, ввода команды: "pacman -S gcc". Эта команда нам еще понадобится, но перед этим разберемся конкретней что нам нужно сделать.
	
	Для начала переходим на сайт документации VS Code , где описывается метод установки : 
	https://code.visualstudio.com/docs/cpp/config-mingw

	1. Вбиваем в поиск установщика, внутри VS Code, "C/C++" и скачиваем программу, которая специализируется именно на работе с С/С++ и делает много полезных вещей:
		* Подсветка синтаксиса
		* Выделяет ключевые слова, операторы, функции и другие элементы для лучшего восприятия кода.
		* Автодополнение кода (IntelliSense)
		* Помогает быстрее писать код, предлагая варианты завершения функций, методов и переменных.
		* Проверка ошибок в реальном времени
		* Указывает на синтаксические и логические ошибки ещё до компиляции.
		* Расширение позволяет интегрировать дебаггеры (например, GDB) для пошагового выполнения кода.

	2. Установка эмулятора UNIX-окружения - "MSYS2" 
		Поскольку компиляторы gcc и g++ - разработка UNIX , а у Windows наверняка есть свои аналоги, но ими никто не пользуется из-за закрытого кода, то для 
		УСТАНОВКИ компиляторов нам потребуется имитация UNIX, а именно Arch Linux, окружения на Windows. Для этого есть замечательная разработка MSYS2, которая
		решает эту проблему. Это по сути программа, которая простым интерфейсом создает под вас окружения в папке, в которой вы укажите и затем по завершению 
		настройки выдает вам Arch Linux консоль, в которой вы уже пользуясь командами дистрибутива устанавливаете нужные вам компиляторы с удаленных репозиториев 
		Arch Linux. 

		На сайте, ссылку которого я указал выше, находим текст-ссылку, текстом обозначена вот так: "direct link to the installer" - нажимаем на нее и устанавливаем 			MSYS2, на всякий случай я ее оставлю ниже - она просто представляет открытый код на GITHUB. 

		Ссылка для установки MSYS2: 
			https://github.com/msys2/msys2-installer/releases/download/2024-01-13/msys2-x86_64-20240113.exe

		
		После успешной установки - мы заходим в программу и настраиваем ее, там ничего сложного, поэтому останавливаться на этом не буду.

	3. Создание программой "MSYS2" окружения. Оставшиеся настройка.
		После того как мы все в ней настроили и нажали "Finish" - мы получим готовое окружение и так же у нас выскочит Linux-консоль. В нее мы вводим следующие 		команды:
		
		
		Команда 1:
		pacman -S mingw-w64-ucrt-x86_64-gcc 
		

		P.S эту команду я взял с официального сайта MSYS2, советую его смотреть паралельно с инструкциями на VS Code, ссылку на которых кидал ранее:
		https://www.msys2.org/


		Описание команды:
			Данная команда устанавливает пользуется стандартной записью для установки пакетов для Arch Linux ("pacman -S"), другая часть обозначает конкретное 			название проекта, адаптирующего GCC для Windows ("mingw-w64"), версия среды разработки ("ucrt"), архитектура процессора ("x86_64")  и сам компилятор 			("gcc").
		
		Что делает команда?
			Устанавливает 64-битную версию GCC, использующую UCRT для компиляции программ, которые будут работать в Windows-окружении.






		Команда 2:
		pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain

			
		P.S данную команду взял с сайта VS Code инструкций, ссылку на который показывал ранее.

		
		Описание команды:
		Данная команда устанавливает пользуется стандартной записью для установки пакетов для Arch Linux ("pacman -S"), затем устанавливает пакеты, только которые еще 		не установлены ("--needed"), устанавливает группу пакетов, включающих основные инструменты для разработки: make, autoconf, automake, gcc и другие 			("base=devel"), и пакет включающий полный набор инструментов MinGW-w64 для 64-битной архитектуры, там gcc, g++ , инструменты сборки и тд 
		("mingw-w64-ucrt-x86_64-toolchain").

		Что делает команда ?
			Устанавливает базовые инструменты для разработки из группы base-devel.
			Устанавливает полный комплект инструментов MinGW-w64 для работы с C и C++ на 64-битной платформе, включая компиляторы и дополнительные утилиты.



	4. Последний этап, системная настройка 

		После выполнения этих двух комманд - следует проверить установились ли компиляторы gcc и g++ - с помощью стандартной команды для Arch Linux:
			gcc --version 
			g++ --version 
		(Вбиваются по отдельности, в имитированной среде разработки UNIX)

	
		Если все корректно - нам выбьет версию компиляторов. Затем мы переходим в наш Folder и ищем папку, в которую мы указали сохранить MSYS2 (по умолчанию 			сохраняет на диске С и называет папку msys64).  Переходим в ее и ищем папку "mingw64" и в ней папку "bin" - она должна быть не пустая. Если же она пустая, 		тогда переходим в папку "ucrt64" в нем так же в "bin" и там уже она должна быть не пустой. Копируем полный путь к непустому бинарнику (бианрник msys64\bin\ 		или msys64\ucrt\bin\ ).

		Затем переходим в программу на Windows: "Изменение системных переменных среды", кликаем в открывшимся окне, почти самую нижнюю кнопку "Переменные среды" и 
		видим два раздела, смотрим на нижний - "Системные переменные" и ищем там "Path", кликаем на него и нажимаем кнопку "Изменить", перед нами высветится окно 
		"Изменить переменную среды" и достаточно много переменных, мы нажимаем кнопку справа "Создать" и вставляем наш скопированный ПОЛНЫЙ путь. После чего нажимаем 		на всех окнах "Ок" и переходим уже не интегрированную, а в нашу Windows консоль и вводим все те же команды для проверки: 
			gcc --version 
			g++ --version 
		(Вбиваются по отдельности, в Windows консоли)

		Если все правильно сделали - должно выдать версию. В таком случае настройка завершена и мы можем переходить в VS Code и писать код на C/C++ !!




	Удобства компиляции 
		P.S так же советую установить предложение "C/C++ Compile Run", для удобной компиляции через значок в верхнем правом углу.

 