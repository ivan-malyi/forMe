Разбор Google-разработки - "Bluedroid" 

    Данная разработка нам нужна для работы с Bluetooth, работе с устройством ESP32-C3 
    и платой ESP32-C3-MINI-1. Но, аппаратная сотсавляющая значительное значение не имеет. 

    Стоит отметить что разработка "Bluedroid"  - не адаптивная к работе на высоком уровне абстракции, а рассчитана на 
    низкоуровневое программирование, с написанием двольно большего и сложно читаемого кода, который работает с различными протоколами, 
    реализовывает Bluetooth-профили и многое другое, с чем не хотелось сталкиваться, особенно, если вы хотите реализвоать простой 
    Bluetooth-интерфейс.
    Для этого есть библиотеки, которые являются надстройкой над "Bluedroid" и автомизируют много вещей, которые мы можем легко 
    настроить, пользуясь уже готовыми методами.


    ESP-IDF предоставляет высокоуровневые API для работы с Bluetooth, которые используют Bluedroid "под капотом". Эти API включают:

        * esp_gap_ble_api.h: Упрощает работу с GAP (Generic Access Profile), например, для сканирования и обнаружения устройств.
        * esp_gattc_api.h : Предоставляют удобный интерфейс для работы с GATT (Generic Attribute Profile), что 
        облегчает передачу данных между устройствами.

        Эти интерфейсы упрощают работу с протоколами и уменьшают обьем кода в десятки раз, что очень удобно.
        Их принято называть ESP-IDF BLE API, так что если будете встечать такое выражение в этапе чтения - знайте, что я 
        имею ввиду, в основном, эти две, базовые библиотеки.


    Разбор ESP-IDF BLE API 
        Начнем разбор, поэтапно, затем совместим наши познания в итоговом проекте и напишем простой, но рабочий код, который 
        свомещает функционал обоих библиотек.


        Перед началом следует дать определенние терминалогии, которая используется в контексте Bluetooth-устройсв.

            * Сервис и что это такое?
                Сервис в BLE — это некий контейнер или набор функций, которые предоставляются устройством. Он описывает функциональность, 
                которую ваше устройство может предложить другим устройствам в сети. Сервисы делятся на несколько типов, например, 
                сервисы для измерений пульса, температуру, датчики и другие.

                Каждый сервис имеет уникальный идентификатор (UUID), который помогает другим устройствам понять, что это за сервис 
                и какие данные он может предоставить.

                Пример: У вас есть устройство, которое измеряет пульс. Это устройство будет предоставлять Heart Rate Service (HR), который 
                содержит информацию о пульсе и других характеристиках здоровья.


            * Характеристика и что это такое ?
                Характеристика — это часть сервиса, которая содержит данные или информацию, которой можно обмениваться между устройствами. 
                Характеристики могут быть для чтения, записи или поддерживать уведомления (например, когда данные изменяются, другой 
                стороной будет отправлено уведомление).

                Пример: В сервисе измерения пульса может быть характеристика, которая хранит текущий пульс устройства. Эта характеристика 
                может поддерживать уведомления, чтобы когда пульс изменится, устройство сразу отправило его на другое устройство 
                (например, на смартфон).

            * Callback функции 
                Callback-функция — это функция, которая передается в другую функцию как аргумент и вызывается позже, 
                когда наступает определенное событие или состояние. Она позволяет нам писать асинхронный код, реагирующий 
                на определенные события.
                Пример такой функции, обычно выстпуает функция, в аргументы которой передаются два параметра: событие (event) и 
                характеристики (params), которое, как правило - структура, в которую мы вносим данные и затем можем их считывать, 
                отправлять, анализировать и тд.
                В теле такой функции, как правило используется конструкция switch-case и анализируется параметр event и прописывается 
                явно, как мы хотим реагировать на это. 




        1. Библиотека esp_gap_ble_api.h
            Это библиотека для управления GAP (Generic Access Profile), которая отвечает за взаимодействие устройства с внешним миром:

                * Рекламирование (advertising): уведомление других устройств о своем присутствии.
                * Сканирование (scanning): поиск других BLE-устройств.
                * Обработка событий GAP, таких как обнаружение устройства, таймауты, ошибки и т. д.  

            Разбор основных функций: 

                1. Инициализация BLE GAP:
                    esp_err_t esp_ble_gap_register_callback(esp_gap_ble_cb_t callback);

                    Здесь указывается callback-функция для обработки всех событий GAP.

                2. Сканирование устройств:
                    esp_err_t esp_ble_gap_start_scanning(uint32_t duration);
                    esp_err_t esp_ble_gap_stop_scanning(void);

                    duration указывает время сканирования в секундах (0 — бесконечное сканирование).

                3. Обработка событий GAP:
                    Callback-функция получает события, такие как:
                        * ESP_GAP_BLE_SCAN_RESULT_EVT: обнаружено устройство.
                        * ESP_GAP_BLE_SCAN_COMPLETE_EVT: завершено сканирование.

        

        2. Библиотека esp_gattc_api.h
            Это библиотека для работы с GATT (Generic Attribute Profile) на стороне клиента. Клиент — это устройство,
            которое подключается к BLE-серверу,чтобы читать/писать его характеристики или подписываться на уведомления.