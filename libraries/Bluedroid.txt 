Разбор Google-разработки - "Bluedroid" 

    Данная разработка нам нужна для работы с Bluetooth, работе с устройством ESP32-C3 
    и платой ESP32-C3-MINI-1. Но, аппаратная сотсавляющая значительное значение не имеет. 

    Стоит отметить что разработка "Bluedroid"  - не адаптивная к работе на высоком уровне абстракции, а рассчитана на 
    низкоуровневое программирование, с написанием двольно большего и сложно читаемого кода, который работает с различными протоколами, 
    реализовывает Bluetooth-профили и многое другое, с чем не хотелось сталкиваться, особенно, если вы хотите реализвоать простой 
    Bluetooth-интерфейс.
    Для этого есть библиотеки, которые являются надстройкой над "Bluedroid" и автомизируют много вещей, которые мы можем легко 
    настроить, пользуясь уже готовыми методами.


    ESP-IDF предоставляет высокоуровневые API для работы с Bluetooth, которые используют Bluedroid "под капотом". Эти API включают:

        * esp_gap_ble_api.h: Упрощает работу с GAP (Generic Access Profile), например, для сканирования и обнаружения устройств.
        * esp_gattc_api.h : Предоставляют удобный интерфейс для работы с GATT (Generic Attribute Profile), что 
        облегчает передачу данных между устройствами.

        Эти интерфейсы упрощают работу с протоколами и уменьшают обьем кода в десятки раз, что очень удобно.
        Их принято называть ESP-IDF BLE API, так что если будете встечать такое выражение в этапе чтения - знайте, что я 
        имею ввиду, в основном, эти две, базовые библиотеки.
        
        После разбора двух основных бибилиотек мы перейдем к вспомогательным библиотекам, которые реализуют некоторые удобные детали 
        для работы проекта.


    Разбор ESP-IDF BLE API 
        Начнем разбор, поэтапно, затем совместим наши познания в итоговом проекте и напишем простой, но рабочий код, который 
        свомещает функционал обоих библиотек.


        Перед началом следует дать определенние терминалогии, которая используется в контексте Bluetooth-устройсв.

            * Сервис и что это такое?
                Сервис в BLE — это некий контейнер или набор функций, которые предоставляются устройством. Он описывает функциональность, 
                которую ваше устройство может предложить другим устройствам в сети. Сервисы делятся на несколько типов, например, 
                сервисы для измерений пульса, температуру, датчики и другие.

                Каждый сервис имеет уникальный идентификатор (UUID), который помогает другим устройствам понять, что это за сервис 
                и какие данные он может предоставить.

                Пример: У вас есть устройство, которое измеряет пульс. Это устройство будет предоставлять Heart Rate Service (HR), который 
                содержит информацию о пульсе и других характеристиках здоровья.


            * Характеристика и что это такое ?
                Характеристика — это часть сервиса, которая содержит данные или информацию, которой можно обмениваться между устройствами. 
                Характеристики могут быть для чтения, записи или поддерживать уведомления (например, когда данные изменяются, другой 
                стороной будет отправлено уведомление).

                Пример: В сервисе измерения пульса может быть характеристика, которая хранит текущий пульс устройства. Эта характеристика 
                может поддерживать уведомления, чтобы когда пульс изменится, устройство сразу отправило его на другое устройство 
                (например, на смартфон).

            * Callback функции 
                Callback-функция — это функция, которая передается в другую функцию как аргумент и вызывается позже, 
                когда наступает определенное событие или состояние. Она позволяет нам писать асинхронный код, реагирующий 
                на определенные события.
                Пример такой функции, обычно выстпуает функция, в аргументы которой передаются два параметра: событие (event) и 
                характеристики (params), которое, как правило - структура, в которую мы вносим данные и затем можем их считывать, 
                отправлять, анализировать и тд. Эта структура создается автоматически библиотекой, когда происходит событие.
                В теле такой функции, как правило, используется конструкция switch-case и анализируется параметр event и прописывается 
                явно, как мы хотим реагировать на это. 




        1. Библиотека esp_gap_ble_api.h
            Это библиотека для управления GAP (Generic Access Profile), которая отвечает за взаимодействие устройства с внешним миром:

                * Рекламирование (advertising): уведомление других устройств о своем присутствии.
                * Сканирование (scanning): поиск других BLE-устройств.
                * Обработка событий GAP, таких как обнаружение устройства, таймауты, ошибки и т. д.  

            Разбор основных функций: 

                1. Инициализация BLE GAP:
                    esp_err_t esp_ble_gap_register_callback(esp_gap_ble_cb_t callback);

                    Здесь указывается callback-функция для обработки всех событий GAP.

                2. Сканирование устройств:
                    esp_err_t esp_ble_gap_start_scanning(uint32_t duration);
                    esp_err_t esp_ble_gap_stop_scanning(void);

                    duration указывает время сканирования в секундах (0 — бесконечное сканирование).

                3. Обработка событий GAP:
                    Callback-функция получает события, такие как:
                        * ESP_GAP_BLE_SCAN_RESULT_EVT: обнаружено устройство.
                        * ESP_GAP_BLE_SCAN_COMPLETE_EVT: завершено сканирование.

        

        2. Библиотека esp_gattc_api.h
            Это библиотека для работы с GATT (Generic Attribute Profile) на стороне клиента. Клиент — это устройство,
            которое подключается к BLE-серверу,чтобы читать/писать его характеристики или подписываться на уведомления.


        

        Дополнительные (вспомогательные) библиотеки

            1. #include "esp_log.h"

                Эта библиотека предоставляет функции для логирования в приложениях на ESP32. Логирование используется для отладки и вывода сообщений 
                о статусе работы программы. Вы можете использовать её для печати сообщений, ошибок и предупреждений в консоль.

                Основные функции из этой библиотеки:

                    * ESP_LOGI(TAG, "message", ...) — Функция для вывода информационного сообщения. TAG — это строка, которая будет использоваться для пометки 
                    сообщения (например, имя модуля или компонента).
                    * ESP_LOGE(TAG, "message", ...) — Функция для вывода сообщения об ошибке.
                    * ESP_LOGW(TAG, "message", ...) — Функция для вывода предупреждения.
                    * ESP_LOGD(TAG, "message", ...) — Функция для вывода отладочного сообщения.
                    * ESP_LOGV(TAG, "message", ...) — Функция для вывода сообщения уровня verbose (детализированное логирование).

                Пример использования:
                    ESP_LOGI("GATT", "BLE service started successfully!");
                    ESP_LOGE("GATT", "Error during service creation: %s", esp_err_to_name(ret));

                Логирование позволяет вам отслеживать, что происходит в вашем приложении, без необходимости останавливаться на каждой строке кода и проверять 
                состояние вручную.


            2. #include "esp_bt.h"

                Эта библиотека предоставляет базовые функции для работы с Bluetooth в ESP32. Она предоставляет интерфейс для работы с Bluetooth Low Energy (BLE) 
                и классическим Bluetooth. В большинстве случаев, когда вы работаете с BLE, вы будете использовать более специфичные библиотеки, такие как 
                esp_gap_ble_api.h и esp_gatts_api.h, но esp_bt.h необходим для базовой инициализации и включения Bluetooth на устройстве.

                Основные функции из этой библиотеки:

                    * esp_bt_controller_init() — Инициализирует Bluetooth контроллер. Это первый шаг, чтобы начать использовать Bluetooth.
                    * esp_bt_controller_enable(ESP_BT_MODE_BTDM) — Включает Bluetooth контроллер в режиме Bluetooth Dual-Mode (BTDM), который поддерживает 
                    как классический Bluetooth, так и BLE.
                    * esp_bluedroid_init() — Инициализирует стек Bluetooth (Bluedroid), который необходим для работы с BLE и классическим Bluetooth.
                    * esp_bluedroid_enable() — Включает стек Bluedroid.

                Пример использования:

                        esp_err_t ret = esp_bt_controller_init();
                        if (ret) {
                            ESP_LOGE("BT_INIT", "Bluetooth controller initialization failed: %s", esp_err_to_name(ret));
                            return;
                        }

                        ret = esp_bt_controller_enable(ESP_BT_MODE_BTDM);
                        if (ret) {
                            ESP_LOGE("BT_INIT", "Bluetooth controller enabling failed: %s", esp_err_to_name(ret));
                            return;
                        }

                        esp_bluedroid_init();
                        esp_bluedroid_enable();

                Этот код инициализирует Bluetooth и включает поддержку Bluetooth на ESP32. Это обязательные шаги для того, чтобы ваше устройство могло работать 
                с Bluetooth.

            
                
            3. #include "esp_system.h"

                Эта библиотека предоставляет функции для работы с системой в целом, такие как управление питанием, перезагрузка устройства, доступ к информации о системе и т.д. Она не связана напрямую с Bluetooth, но используется в большинстве проектов на ESP32.

                Основные функции из этой библиотеки:
                    * esp_restart() — Перезагружает устройство. Это может быть полезно, если необходимо выполнить перезагрузку устройства для применения изменений.
                    * esp_log_level_set() — Настройка уровня логирования для библиотеки esp_log.h.
                    * esp_chip_info() — Получает информацию о чипе ESP32, например, модель чипа, количество ядер и доступную память.