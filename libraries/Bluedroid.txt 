Разбор Google-разработки - "Bluedroid" 

    Данная разработка нам нужна для работы с Bluetooth, работе с устройством ESP32-C3 
    и платой ESP32-C3-MINI-1. Но, аппаратная сотсавляющая значительное значение не имеет. 

    Стоит отметить что разработка "Bluedroid"  - не адаптивная к работе на высоком уровне абстракции, а рассчитана на 
    низкоуровневое программирование, с написанием двольно большего и сложно читаемого кода, который работает с различными протоколами, 
    реализовывает Bluetooth-профили и многое другое, с чем не хотелось сталкиваться, особенно, если вы хотите реализвоать простой 
    Bluetooth-интерфейс.
    Для этого есть библиотеки, которые являются надстройкой над "Bluedroid" и автомизируют много вещей, которые мы можем легко 
    настроить, пользуясь уже готовыми методами.





    GAP (General Access Profile)
        Для начала следует разобрать основной слой спецификации Bluetooth - GAP. По сути GAP — это мост, который связывает устройства и 
        позволяет им "разговаривать" друг с другом, начиная с простого обнаружения и заканчивая установлением соединений.

         Он описывает:
            * Роли устройств (например, центральное устройство и периферийное).
            * Процессы обнаружения (например, поиск устройств и их рекламирование).
            * Установление соединения (например, кто инициирует соединение и как оно происходит).
            * Обмен данными между устройствами.



        Роли GAP

            * Broadcaster (Рекламодатель):
                Устройство, которое только передает информацию (например, маячок).
                Не принимает входящих соединений.
                Пример из жизни : 
                    Билборд, который просто показывает информацию и никак иначе не взаимодейсвует.

            * Observer (Наблюдатель):
                Устройство, которое только сканирует рекламные пакеты, но не подключается.
                Пример из жизни: 
                    Вы гуляете по улице и смотрите на билборды, вы не можете к ним подключиться или начать взаимодейсвовать с ними,
                    но собирать информацию вы можете..


        Роли GATT 

            * Peripheral (Периферийное устройство):
                Устройство, которое рекламирует себя и ожидает соединений.
                Например, фитнес-браслет или термометр.
                Пример из жизни:
                    Wi-Fi сеть в кафе, которая перед подключением может показать основную информацию о ней (Имя, данные о 
                    производителе, UUID сервисов)

            * Central (Центральное устройство):
                Устройство, которое сканирует сеть, находит периферийные устройства и подключается к ним.
                Например, смартфон, который подключается к наушникам или браслету.
                Пример из жизни: 
                    Вы заходите в кафе и хотите подсоединиться к Wi-Fi, предворительно сканируя информацию о доступных сетях, чтобы выбрать 
                    подходящую вам.

        Как GAP/GATT работает в Bluetooth
            Как можно было понять, по примерам выше, устройства взаимодейсвовуют опредленными парами: 
                Broadcaster и Observer:
                    Broadcaster передает рекламные пакеты (advertising packets), содержащие имя устройства, данные о производителе, 
                    UUID услуги и т. д.
                    Observer сканирует эти пакеты, чтобы найти интересные устройства.

                Peripheral и Central:
                    Peripheral рекламирует себя, чтобы его заметил Central.
                    Central сканирует и подключается к выбранному устройству Peripheral.
                    После соединения устройства обмениваются данными.

            Если вы хотите создать датчик, отправляющий данные без подключения (например, маячок), выбирайте Broadcaster (GAP).
            Если устройство должно подключаться и взаимодействовать с другими (например, фитнес-браслет), выбирайте Peripheral(GATT).






    ESP-IDF предоставляет высокоуровневые API для работы с Bluetooth, которые используют Bluedroid "под капотом". Эти API включают:

        * esp_gap_ble_api.h: Упрощает работу с GAP (Generic Access Profile), например, для сканирования и обнаружения устройств.
        * esp_gattc_api.h : Предоставляют удобный интерфейс для работы с GATT (Generic Attribute Profile), что 
        облегчает передачу данных между устройствами.

        Эти интерфейсы упрощают работу с протоколами и уменьшают обьем кода в десятки раз, что очень удобно.
        Их принято называть ESP-IDF BLE API, так что если будете встечать такое выражение в этапе чтения - знайте, что я 
        имею ввиду, в основном, эти две, базовые библиотеки.
        
        После разбора двух основных бибилиотек мы перейдем к вспомогательным библиотекам, которые реализуют некоторые удобные детали 
        для работы проекта.


    Разбор ESP-IDF BLE API 
        Начнем разбор, поэтапно, затем совместим наши познания в итоговом проекте и напишем простой, но рабочий код, который 
        свомещает функционал обоих библиотек.


        Перед началом следует дать определенние терминалогии, которая используется в контексте Bluetooth-устройсв.

            * Сервис и что это такое?
                Сервис в BLE — это некий контейнер или набор функций, которые предоставляются устройством. Он описывает функциональность, 
                которую ваше устройство может предложить другим устройствам в сети. Сервисы делятся на несколько типов, например, 
                сервисы для измерений пульса, температуру, датчики и другие.

                Каждый сервис имеет уникальный идентификатор (UUID), который помогает другим устройствам понять, что это за сервис 
                и какие данные он может предоставить.

                Пример: У вас есть устройство, которое измеряет пульс. Это устройство будет предоставлять Heart Rate Service (HR), который 
                содержит информацию о пульсе и других характеристиках здоровья.


            * Характеристика и что это такое ?
                Характеристика — это часть сервиса, которая содержит данные или информацию, которой можно обмениваться между устройствами. 
                Характеристики могут быть для чтения, записи или поддерживать уведомления (например, когда данные изменяются, другой 
                стороной будет отправлено уведомление).

                Пример: В сервисе измерения пульса может быть характеристика, которая хранит текущий пульс устройства. Эта характеристика 
                может поддерживать уведомления, чтобы когда пульс изменится, устройство сразу отправило его на другое устройство 
                (например, на смартфон).


            * Callback функции 
                Callback-функция — это функция, которая передается в другую функцию как аргумент и вызывается позже, 
                когда наступает определенное событие или состояние. Она позволяет нам писать асинхронный код, реагирующий 
                на определенные события.
                Пример такой функции, обычно выстпуает функция, в аргументы которой передаются два параметра: событие (event) и 
                характеристики (params), которое, как правило - структура, в которую мы вносим данные и затем можем их считывать, 
                отправлять, анализировать и тд. Эта структура создается автоматически библиотекой, когда происходит событие.
                В теле такой функции, как правило, используется конструкция switch-case и анализируется параметр event и прописывается 
                явно, как мы хотим реагировать на это. 




        1. Библиотека esp_gap_ble_api.h
            Это библиотека для управления GAP (Generic Access Profile), которая отвечает за взаимодействие устройства с внешним миром:

                * Рекламирование (advertising): уведомление других устройств о своем присутствии.
                * Сканирование (scanning): поиск других BLE-устройств.
                * Обработка событий GAP, таких как обнаружение устройства, таймауты, ошибки и т. д.  

            Разбор основных функций: 

                1. Инициализация BLE GAP:
                    esp_err_t esp_ble_gap_register_callback(esp_gap_ble_cb_t callback);

                    Здесь указывается callback-функция для обработки всех событий GAP.

                2. Сканирование устройств:
                    esp_err_t esp_ble_gap_start_scanning(uint32_t duration);
                    esp_err_t esp_ble_gap_stop_scanning(void);

                    duration указывает время сканирования в секундах (0 — бесконечное сканирование).

                3. Обработка событий GAP:
                    Callback-функция получает события, такие как:
                        * ESP_GAP_BLE_SCAN_RESULT_EVT: обнаружено устройство.
                        * ESP_GAP_BLE_SCAN_COMPLETE_EVT: завершено сканирование.

        

        2. Библиотека esp_gattc_api.h
            Это библиотека для работы с GATT (Generic Attribute Profile) на стороне клиента. Клиент — это устройство,
            которое подключается к BLE-серверу,чтобы читать/писать его характеристики или подписываться на уведомления.


        

        Дополнительные (вспомогательные) библиотеки

            1. #include "esp_log.h"

                Эта библиотека предоставляет функции для логирования в приложениях на ESP32. Логирование используется для отладки 
                и вывода сообщений о статусе работы программы. Вы можете использовать её для печати сообщений, ошибок и предупреждений 
                в консоль.

                Основные функции из этой библиотеки:

                    * ESP_LOGI(TAG, "message", ...) — Функция для вывода информационного сообщения. TAG — это строка, которая будет 
                    использоваться для пометки сообщения (например, имя модуля или компонента).
                    * ESP_LOGE(TAG, "message", ...) — Функция для вывода сообщения об ошибке.
                    * ESP_LOGW(TAG, "message", ...) — Функция для вывода предупреждения.
                    * ESP_LOGD(TAG, "message", ...) — Функция для вывода отладочного сообщения.
                    * ESP_LOGV(TAG, "message", ...) — Функция для вывода сообщения уровня verbose (детализированное логирование).

                Пример использования:
                    ESP_LOGI("GATT", "BLE service started successfully!");
                    ESP_LOGE("GATT", "Error during service creation: %s", esp_err_to_name(ret));

                Логирование позволяет вам отслеживать, что происходит в вашем приложении, без необходимости останавливаться на каждой 
                строке кода и проверять состояние вручную.


            2. #include "esp_bt.h"

                Эта библиотека предоставляет базовые функции для работы с Bluetooth в ESP32. Она предоставляет интерфейс для работы 
                с Bluetooth Low Energy (BLE) и классическим Bluetooth. 
                В большинстве случаев, когда вы работаете с BLE, вы будете использовать более специфичные библиотеки, такие как 
                esp_gap_ble_api.h и esp_gatts_api.h, но esp_bt.h необходим для базовой инициализации и включения Bluetooth на устройстве.

                Основные функции из этой библиотеки:

                    * esp_bt_controller_init() — Инициализирует Bluetooth контроллер. Это первый шаг, чтобы начать использовать 
                    Bluetooth.
                    * esp_bt_controller_enable(ESP_BT_MODE_BTDM) — Включает Bluetooth контроллер в режиме Bluetooth Dual-Mode (BTDM), 
                    который поддерживает как классический Bluetooth, так и BLE.
                    * esp_bluedroid_init() — Инициализирует стек Bluetooth (Bluedroid), который необходим для работы с BLE и 
                    классическим Bluetooth.
                    * esp_bluedroid_enable() — Включает стек Bluedroid.

                Пример использования:

                        esp_err_t ret = esp_bt_controller_init();
                        if (ret) {
                            ESP_LOGE("BT_INIT", "Bluetooth controller initialization failed: %s", esp_err_to_name(ret));
                            return;
                        }

                        ret = esp_bt_controller_enable(ESP_BT_MODE_BTDM);
                        if (ret) {
                            ESP_LOGE("BT_INIT", "Bluetooth controller enabling failed: %s", esp_err_to_name(ret));
                            return;
                        }

                        esp_bluedroid_init();
                        esp_bluedroid_enable();

                Этот код инициализирует Bluetooth и включает поддержку Bluetooth на ESP32. Это обязательные шаги для того, чтобы ваше 
                устройство могло работать с Bluetooth.

            
                
            3. #include "esp_system.h"

                Эта библиотека предоставляет функции для работы с системой в целом, такие как управление питанием, перезагрузка устройства, доступ к информации 
                о системе и т.д. Она не связана напрямую с Bluetooth, но используется в большинстве проектов на ESP32.

                Основные функции из этой библиотеки:
                    * esp_restart() — Перезагружает устройство. Это может быть полезно, если необходимо выполнить перезагрузку устройства для применения изменений.
                    * esp_log_level_set() — Настройка уровня логирования для библиотеки esp_log.h.
                    * esp_chip_info() — Получает информацию о чипе ESP32, например, модель чипа, количество ядер и доступную память.



            
Детальный разбор функционала: 

    esp_gap_ble_api.h


    
        В библиотеке esp_gap_ble_api.h используются специальные структуры, чтобы настроить функционал работы устройства, 
        которое хочет работать по принципу GAP.


        Давайте перечислим основные: 
            1. esp_ble_adv_params_t
                Эта структура используется для конфигурации параметров рекламы (advertising) устройства, 
                таких как интервал рекламы, тип рекламы, фильтрация и т. д.
            Поля:
                * adv_int_min: минимальный интервал рекламы в 0.625 мс.
                * adv_int_max: максимальный интервал рекламы в 0.625 мс.
                    Эти значения задают минимальный и максимальный интервал в миллисекундах между рекламными пакетами. 
                    Реклама — это передача пакетов данных в эфир (например, чтобы другие устройства могли найти ваше). 
                    Интервал указывает, как часто ваш устройство будет посылать рекламу. Например, если у вас стоит интервал 
                    100 мс, то ваше устройство будет рекламировать себя каждые 100 миллисек.

                * adv_type: тип рекламы (например, непрерывная реклама, реклама с ответом).
                    Это параметр, который задает тип пакета рекламы. В Bluetooth есть разные типы рекламы, 
                    например, ADV_IND (реклама с информацией об устройстве) или ADV_NONCONN_IND (реклама без попытки соединения). 
                    Если тип ADV_IND, то реклама будет содержать информацию о доступности для подключения. Реклама с ответом означает, 
                    что ваше устройство может получать отклики от других устройств.

                * own_addr_type: тип адреса устройства (например, публичный, случайный).
                    Это указывает на тип используемого адреса. Адрес может быть публичным (предсказуемым, уникальным для устройства) 
                    или приватным (изменяемым для защиты конфиденциальности). Приватные адреса могут использоваться для повышения 
                    безопасности и предотвращения отслеживания устройства.

                * channel_map: карта каналов для рекламы.
                    Карта каналов указывает на каналы, которые устройство будет использовать для рекламы. Bluetooth использует 
                    несколько каналов для передачи рекламы. Например, представьте, что у вас есть рекламный баннер на нескольких 
                    улицах. Включив разные каналы, ваше устройство может отправлять рекламу на различных частотах, как если бы 
                    баннер был видим с разных точек города.

                * adv_filter_policy: политика фильтрации, которая определяет, кто может или не может увидеть рекламные пакеты.
                    Политика фильтрации определяет, как рекламные пакеты будут обрабатываться устройствами в радиусе действия. 
                    Например, ADV_FILTER_ALLOW_ALL означает, что все устройства могут видеть вашу рекламу, 
                    а ADV_FILTER_ALLOW_SCAN_WLST_CON_ANY ограничивает показ рекламы только устройствам, которые находятся в белом 
                    списке (о нем речь пойдет дальше) и поддерживают подключение.

            2. esp_ble_scan_params_t
                Эта структура используется для настройки параметров сканирования BLE, таких как длительность 
                сканирования, интервалы и фильтрация.

            Поля:
                * scan_type: тип сканирования (например, пассивное или активное).
                    Это определяет, будет ли сканирование активным или пассивным. В активном сканировании ваше устройство 
                    отправляет запросы на обнаружение других устройств, а в пассивном только слушает их рекламные пакеты. 
                    Например, активное сканирование — это как когда вы выставляете баннер и спрашиваете прохожих, интересуются 
                    ли они вашим товаром, а пассивное — это когда вы просто наблюдаете за прохожими и ждете, кто заметит баннер.

                * own_addr_type: тип адреса устройства для сканирования.
                * scan_filter_policy: фильтрация на основе типа устройства.
                    Это указывает, должны ли быть отфильтрованы устройства по типу. Например, если вы хотите сканировать только 
                    устройства типа smartphone или sensor, а не все возможные устройства. 

                * scan_interval: интервал между сканированием в 0.625 мс.
                    Это пауза между двумя последовательными сканированиями. Например, если интервал 100 мс, 
                    ваше устройство будет ждать 100 мс перед каждым новым сканированием.

                * scan_window: окно сканирования в 0.625 мс.
                    Это период времени, в течение которого устройство будет слушать каналы рекламы. Например, если окно 50 мс, 
                    ваше устройство будет "слушать" рекламу 50 мс из 100 мс интервала. Если окно больше интервала, устройство 
                    будет постоянно слушать.


            3. esp_ble_conn_params_t
                Эта структура используется для настройки параметров соединения, таких как интервалы соединения, 
                задержка связи и параметры таймаутов.

            Поля:
                * min_conn_int: минимальный интервал соединения (в 1.25 мс).
                * max_conn_int: максимальный интервал соединения (в 1.25 мс).
                    Эти параметры определяют минимальное и максимальное время, которое будет проходить между двумя устройствами
                    в процессе обмена данными. Если интервал слишком большой, соединение может быть разорвано, если слишком малый — 
                    это приведет к излишнему потреблению энергии.

                * conn_latency: задержка соединения.
                    Это параметр, который указывает, сколько промежутков времени между пакетами обмена данными можно пропустить. 
                    Например, если задержка высокая, соединение будет менее отзывчивым, но экономить больше энергии.

                * supervision_timeout: таймаут надзора для соединения.
                    Таймаут указывает на время, в течение которого устройство должно продолжать поддерживать соединение без 
                    обмена данными. Если данных нет, а время таймаута истекло, соединение будет разорвано. 


            4. esp_ble_gap_cb_param_t
                Это структура, которая используется для передачи параметров в коллбек-функции, которые обрабатывают 
                различные события GAP (например, сканирование, подключение, отключение).

            Поля:
                В этой структуре может быть несколько разных под-структур, в зависимости от типа события GAP. 
                Например:
                    * scan_result: результаты сканирования.
                        Это информация о том, был ли найден новый сканируемый объект или нет. 
                        Например, если найдено новое устройство, результат будет успешным.

                    * conn_status: статус соединения (например, успешное подключение или ошибка).
                    * disconnect_reason: причина отключения устройства.
                        Это может быть разрыв соединения по причине ошибки, timeout, или вручную инициированное отключение. 
                        Например, устройства могут отключиться из-за ошибки передачи данных или по инициативе одного из устройств.


            5. esp_ble_bonding_state_t
                Эта структура используется для хранения состояния привязки устройства (паринга), если используется 
                аутентификация и защита соединения.

                Привязка означает, что два устройства запомнили друг друга и могут повторно подключиться без необходимости повторной 
                аутентификации.
                Привязка используется для упрощения повторных подключений и обмена данными. Это как если бы два человека обменялись 
                визитками и договорились о дальнейшем взаимодействии.

            Поля:
                * state: текущее состояние привязки (например, нет привязки, привязка в процессе, привязка завершена).
                * bonded_devices: количество ранее привязанных устройств.


            6. esp_ble_ota_params_t
                Эта структура используется для настройки параметров OTA (обновления по Bluetooth), таких как интервалы 
                передачи данных и другие параметры связи.

                OTA (Over-The-Air) обновления позволяют обновлять устройство через Bluetooth.
                OTA — Это процесс обновления прошивки устройства без проводного соединения. Могут быть разные режимы OTA, 
                такие как режим download (загрузка прошивки) или update (обновление прошивки). Например, как если бы вы скачивали 
                новую версию приложения на свой смартфон через интернет, не подключаясь к компьютеру.

    Интервал обновлений OTA — Это период времени, через который проверяется наличие обновлений. Например, обновление может быть выполнено через 1 минуту или 10 минут после начала процесса.


            Поля:
                * ota_interval: интервал обновлений OTA.
                * ota_mode: режим OTA (например, приоритет передачи данных).






        Фильтрация устройств: 
            ADV_FILTER_ALLOW_SCAN_ANY_CON_ANY
                Разрешает всем устройствам сканировать и подключаться.

            ADV_FILTER_ALLOW_SCAN_WLST_CON_ANY
                Разрешает сканирование только устройствам из белого списка, но подключаться могут любые устройства.

            ADV_FILTER_ALLOW_SCAN_ANY_CON_WLST
                Разрешает сканирование любым устройствам, но подключение — только из белого списка.

            ADV_FILTER_ALLOW_SCAN_WLST_CON_WLST
                Ограничивает и сканирование, и подключение устройствами из белого списка.

        Белый спсисок - Whitelist (для фильтрации устройств):
            Белый список — это список устройств, которым разрешено сканировать и/или подключаться к вашему устройству. 
            Используется для повышения безопасности и ограничения взаимодействия только с доверенными устройствами.

            Для работы с белым списком вы можете использовать функции, такие как:

                esp_ble_gap_update_whitelist(): Добавляет/удаляет устройства из белого списка.