NodeMcu ESP8266

    В данном файле мы разберем сначала что такое NodeMcu ESP8266, какая у нее переферия, что с ее помощью можно спроетировать и как подключать, прошивать.
    На ее примере мы напишем код и запустим его на плате, так же можем использовать его так, с чем часто путают ESP8266 - как Wi-Fi модуль, сможем находить активные сети
    и через них попробуем реализовать трафик пакетов.





О NodeMcu ESP8266
    Плата NodeMCU ESP8266 — это популярный микроконтроллер на базе чипа ESP8266, который широко используется для разработки проектов IoT (Интернета вещей). Она имеет 
    множество возможностей и может использоваться в различных приложениях, таких как умный дом, мониторинг, управление устройствами через Wi-Fi и многое другое.



    Процессор:
        Микроконтроллер ESP8266 с одноядерным процессором Tensilica L106 (архитектура Xtensa) на тактовой частоте до 80 MHz (можно разогнать до 160 MHz, но это требует дополнительной настройки).
    
    Память:
        SRAM: 50 КБ.
        Flash: Обычно 4 МБ (может варьироваться от 512 КБ до 4 МБ в зависимости от версии).
    
    Беспроводные возможности:
        Wi-Fi 802.11 b/g/n (2.4 ГГц), с возможностью подключения к Wi-Fi-сетям и создания точки доступа (AP).
        Поддержка протоколов TCP/IP, HTTP, MQTT, WebSocket и других для обмена данными по сети.
    
    Пины ввода/вывода (GPIO):
        На плате NodeMCU доступно 16 пинов GPIO, которые можно использовать для подключения датчиков, реле, светодиодов, кнопок и других периферийных устройств.
        Поддержка интерфейсов PWM, I2C, SPI, UART, ADC (аналоговый вход).

    Интерфейсы:
        1 UART для общения с другими устройствами.
        1 SPI и 1 I2C для работы с датчиками, дисплеями и другими периферийными устройствами.
        1 ADC (аналоговый вход) для считывания данных с аналоговых датчиков (например, датчиков температуры, влажности).

    Энергопотребление:
        Поддержка режимов энергосбережения (спящий режим, глубокий сон), что делает NodeMCU хорошим выбором для батарейных устройств.








Сравние ESP8266 с ATmega328P
    ESP8266, не смотря на отсутсвие Bluetooth и частым названием, как Wi-Fi модуль может сложить мнение о себе, что его можно использовать в очень ограниченом плане, но это не так
    в нем есть множество возможностей, которые есть у остальных микроконтроллеров и он может выполнять ровно то же, что и они. Если сравнивать с микроконтроллера AVR - то разница
    будет значительной в пользу ESP с его 32-битным процессоров, по сравнению с тем же ATmega328P, у которого 8-битный процессор AVR. Так же можно явно проследить разницу 
    микропроцессоров и микроконтроллеров по их частоте работы - у ESP8266 частота может достигать 160 МГц , в то время как у ATmega328 остновная частота 20МГц.
    Опреативной памяти (RAM / SRAM) у ESP8266 целых 160 КВ, к 2 КВ у ATmega328P, flash - 1-16 MB к 32 КВ у ATmega328P.








Работа с Wi-Fi


    ESP8266WiFi.h
        Чтобы приступить к самому интересному, по моему мнению, а именно к Wi-Fi части, мы можем воспользоваться уже готовой библмотекой, предназначеной под это. 
        Называется она - ESP8266WiFi.h и она очень простая и позволяте напрямую взаимодейсвовать с Wi-Fi модулем. 

        С ее помощью мы можем реализваоть весь функционал: 
            * Покдлючение/Отключение к Wi-Fi 
            * Взаимодействие как клиент (подключаясь к сети) и как сервер (ожидая подключение к тчоке дсотупа ESP)
            * Так же поддерживается гибридный режим работы - мы можем одновременно подключаться к сети Wi-Fi (как клиент) и предосталять доступ другим устройствам (как точка дсотупа).
            * Есть возможность получать данные о подключенном устройстве, такие как : 
                * WiFi.SSID() — возвращает имя сети.
                * WiFi.RSSI() — сигнал сети (уровень мощности).
                * WiFi.macAddress() — MAC-адрес устройства.
                * WiFi.hostname() — имя устройства в сети.
            * Работа с сетевыми протоколами: с помощью библеотеки мы можем создать HTTP-сервер, который будет прослушывать какой-нибудь порт и обрабатывать входные запросы.


        Итог о  ESP8266WiFi.h : 
            С помоью библеотеки  ESP8266WiFi.h мы можем контактирвоать с конкретными Wi-Fi сетями и создавать свои собсвенные. 
            Это базовая библеотека, которую используют часто в связке с другим, такие как : WiFiClient или ESP8266HTTPClient, которые позволяют работать с HTTP-запросами, чтобы мы 
            могли отправлять запросы на удаленные сервера (интеренет) и затем их анализировать, обрабатывать и делать что нам вздумается.
            Дальше мы их разберем.




    ESP8266HTTPClient.h
        Одна из возможных библеотек, для работы с HTTP-запросами - это  ESP8266HTTPClient.h. С помощью ее мы создаем обьект и затем отпарвляем через него GET() запрос, на какой 
        нибудь удаленный сервер. 
        Чтобы сервер имел возможность понять, что именно вы хотите - вы должны это явно прописать и передать в URL (ссылке).
        Кроме того, часто в GET-запросах используются параметры в URL. Параметры передаются после знака вопроса (?), и каждый параметр разделяется амперсандом (&). Параметры
        обычно передают данные для фильтрации, сортировки или другие значения, которые сервер должен использовать для обработки запроса.

        Например, мы хотим получить данные о каком-то user по его ID, путь может быть таким :
            http://example.com/api/user/123

        Такой путь правильней хранить в переменной и отдельном файле, настройки. Но если нам нужно от какого-то сервера с определенным адресом несколько параметров ? Мы 
        можем создать несколько переменных, но так же можем воспользоваться просто модернизацией адреса в реальном "времени": 
            String url = String(serverName) + "?param1=value1&param2=value2";

        Что происходит на сервере?
            Когда сервер получает GET-запрос, он анализирует URL и параметры:

            1. Путь URL указывает на конкретный ресурс. Например, /api/user/123 может означать запрос на получение информации о пользователе с ID 123.
            2. Параметры запроса (например, ?category=electronics&sort=price) могут изменять поведение сервера — фильтровать или сортировать данные в зависимости от переданных значений.
            3. Метод обработки запроса: сервер определяет, какой функционал должен быть вызван для обработки запроса, исходя из пути и параметров. Это может быть сделано через маршрутизацию 
            (routing), которая анализирует запрос и вызывает соответствующий обработчик.


    