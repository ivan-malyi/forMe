




Отличие микропроцессор от микроконтроллеров

	Микропроцессор:
		Это только процессор (CPU) для выполнения вычислений.
		Требует внешней памяти, периферии и интерфейсов для работы.
		Пример: Используется в ПК или более сложных системах.


	Микроконтроллер:
		Включает CPU, память (RAM/Flash) и периферию (таймеры, UART, ADC и т.д.) в одном корпусе.
		Готовое решение для встроенных систем.
		Пример: ATmega328P (Arduino Nano), ESP32.






Протоклы для бесспроводной передачи данных "Thread" и "Zigbee"

	С помощью протоколов "Thread" и "Zigbee" можно создавать целые сети беспроводной связи, между устройствами, по типу умного дома.


	Сравнение Thread и Zigbee:

	Параметр			Thread					Zigbee
	Год разработки			2014 (новый стандарт)			2003 (старый стандарт)
	Сетевой стек			IPv6					Проприетарный
	Энергоэффективность		Высокая					Средняя
	Интеграция с интернетом		Прямая через IPv6			Нужен шлюз
	Сложность настройки		Выше из-за IP-функций			Простая
	Совместимость			Современные устройства IoT		Устройства старого стандарта


	Когда говорится, что стек Zigbee проприетарный, я имеется в виду, что стек протокола Zigbee (включая его спецификации и реализацию) не является полностью открытым или 	стандартным, в отличие от более открытых решений, таких как Thread с его IPv6 и использованием стандартных технологий.



	Zigbee — это набор стандартов, разработанных и управляемых Zigbee Alliance (ныне Connectivity Standards Alliance). Он имеет свои собственные спецификации и протоколы, 	которые защищены авторскими правами и требуют лицензирования для реализации и использования.

	Проприетарный стек значит, что для работы с Zigbee-устройствами необходимо использовать компоненты, которые поддерживают этот протокол, обычно предоставляемые 	лицензированными разработчиками, такими как Texas Instruments, Silicon Labs, и другими.

	В отличие от этого, Thread использует открытые стандарты, такие как IPv6, что делает его более гибким и совместимым с другими IP-устройствами, а его протоколы не 	привязаны к конкретной компании или закрытой лицензии.







ESP8266, ESP32 и их последователи 

1. ESP8266 - старый, но досиг пор используемый микропроцессор. Нет Bluetooth и других интерсных нововедений новых серий, но он простой 
и хорошо подойдет для каких-то не сложных, самодельных проектов.

2. ESP32 - микропроцессор, на базе которого выпускается целые линейки различных микропроцессоров, базовое название для целой 
серии микропроцессоров: 

    *ESP32-H: новейшая версия из серии. Не выделяется большими объемами памяти и работой на высоких частотах, но поддерживает 
    важные иновации: Bluetooth 5.0, никзкое энеропотребление, шифрование, поддержка протоколов беспроводной передачи данных 
    "Thread" и "Zigbee". 
    Соответсвенно серия ESP32-H позицинируется, как лучшее решения для умных устройств в вашем умном доме.

    *ESP32-C: как позицинирует производитель, данная версия - это улучшенный вариант ESP8266: недорогой и энергоэффективный.
    На ESP32-C часто создаются умыне устройства, у которых нет такого требования для создания бесспроводной сети и общения 
    с другими устройствами.
    Но есть и исключения, например имеется новая, шестая версия (ESP32-C6), котоаря поддерживает протоколы "Thread" и "Zigbee",
    Bluetooth 5.0 и Wi-Fi новой, шестой версии. 

    *ESP32-S: серия S имеет процессор нового поколения, много средсв защиты, шифрование, новые протоколы, а так же Bluetooth 5.0 
    (в ESP32-S4, в ESP32-S2 - Bluetooth отсутсвует).

    *ESP32: на фоне новых серий, где вводятся уже новые протоколы передачи данных, Bluetooth 5.0, Wi-Fi v6, создаются целые 
    беспроводные сети  и тд - ESP32 может потеряться, но когда нам нужно бюджетный и простой микропроцессор дял своих домашних 
    изделий - мы обращаемся к именно ESP32, который есть практически на каждом шагу и стоит пару долларов. 
    Тут поддерживается и Wi-Fi и Bluetooth, пускай тут поддерживаются и устарелые протоколы передачи данных, но для протсеньких 
    стартовых проектов хватате вполне.


    ESP32 чип и модуль, в чем разница ? 

        У самого чипа ESP32 есть несколько моделей: 
        1.ESP31B: 2 ядра, 6*6 мм - Предрелизный SoC для бета-тестов, снят с производства
        2.ESP32-D0WDQ6: 2 ядра, 6*6 мм - Первая версия чипа ESP32 
        3.ESP32-D0WDQ: 2 ядра, 5*5 мм - чип с уменьшиним корпусом, аналог ESP32-D0WDQ6
        4.ESP32-D2WD: 2 ядра, 2МБ встроенной флэш-памяти, 5*5 мм - вариант со встроенной flash-памятью
        5.ESP32-S0WD : 1 ядро, 5*5 мм - вариант с одним ядром

        В основном, все они стряотся на базе 2-х ядерного чипа ESP32.

        Помимо чипов, стоит отлчиать модули ESP32 - это их переферия, SoC-плата. У модуля ESP32 тоже большое количество вариаций, 
        (около 30) - где то используется другой материал, по другому сконструированная антена, по другому напаяна дополнительная 
        SMD память и тд.
        Но, в основном вы будете встречать модуль ESP-WROOM-32. Как и в случае с чипом ESP32-D0WDQ6 - это первый модуль, который вышел 
        в производство, и соответсвенно в ней установлен самый первый серийный чип ESP32-D0WDQ6.


    

Азы Bluetooth в ESP32
    Поскольку, Bluetooth нет на ESP8266, но он есть на ESP32 - будем рассматривать его именно на нем.
    ESP32 имеет Bluetooth v4.2, который в свою очередь имеет два режима работы и дополнительный третий: 
        1. BR - Basic (до 1 Мбит/сек) - посравнению со вторым режимом гораздо медленее, но он надежный и работате без задержек.
        Если проводить аналогию с сетевым уровнем - то это своего рода TCP, который гарантирует целостность доставки, засчет 
        перепроверок, но засчет этого теряет во времени.
        2. EDR - Enhance Data Rate (до 3Мбит/сек), улучшается энергоэффективность. Своего рода UDP на сетевом представлении, 
        не гарантирует целостность доставки данных и возможны задержеки, но скорость передачи гороздо быстрее.

        Режим мы выбираем в зависимости от наших целей: если наш микропроцессор будет передавать какие-то управляющие команды по 
        Bluetooth, то лучше использовать BR, из-за его надежности и целсотности передачи данных.
        Если же мы передаем какие-то файлы (особенно большие) или аудио-данные, то тут EDR - наш лучший друг, все пройдет быстро и 
        с небольшими потерями данных и энергии.

        Так же у ESP32 есть поддержка BLE.

        3. BLE - Bluetooth Low Energy: технология, которая позволяет обеспечивать низкое энергопотребление. Этот режим нам 
        понадобится, когда мы будем разрабатывать небольшие устройства, которые питаются от акамулятора (по типу часов, машинок и тд).






ЦАП на ESP32
    Помимо всех приведенных привелегий, ESP32 так же имеет и может использовать преимущества ЦАП и генерировать и выдавать,
    не просто ШИМ сигнал, но и аналоговый, который затем можно передавть на анализирующее устройство или если сигнал немного 
    усилить, то ESP32 сможет вывести звук на динамики.






Wi-Fi протоколы b-g-n
    Есть стандарт Wi-Fi IEEE 802.11b/g/n, который описывает протоколы передачи данных по беспроводной сети. Его в частности 
    поддерживает и соблюдает ESP32 

    Протоколы BGN:

        802.11b:
            Год стандартизации: 1999.
            Диапазон частот: 2.4 ГГц.
            Максимальная скорость передачи данных: 11 Мбит/с.
            Технология модуляции: DSSS (Direct Sequence Spread Spectrum).
            Особенности:
                Это один из первых массово используемых Wi-Fi стандартов.
                Работает на низкой скорости и подвержен помехам от других устройств на 2.4 ГГц (например, микроволновки или Bluetooth).

        802.11g:
            Год стандартизации: 2003.
            Диапазон частот: 2.4 ГГц.
            Максимальная скорость передачи данных: 54 Мбит/с.
            Технология модуляции: OFDM (Orthogonal Frequency Division Multiplexing), что дает лучшую устойчивость к помехам.
            Особенности:
                Обратная совместимость с 802.11b.
                Более высокая скорость передачи данных по сравнению с b.

        802.11n:
            Год стандартизации: 2009.
            Диапазон частот: 2.4 ГГц и 5 ГГц (двухдиапазонный стандарт).
            Максимальная скорость передачи данных: до 600 Мбит/с (в зависимости от числа потоков MIMO).
            Технология модуляции: OFDM с использованием технологий MIMO (Multiple Input, Multiple Output) для увеличения пропускной способности.
            Особенности:
                Значительное улучшение скорости и устойчивости связи.
                Поддерживает использование нескольких антенн (MIMO).
                Наиболее распространённый стандарт Wi-Fi на большинстве современных устройств.






Wi-Fi на ESP32 

    Так же ESP32 может похвастаться Wi-Fi модуль, который поддерживает, хоть и старые, но давно используемые протоколы.

    * Почему используются именно эти протоколы?
        ESP32 поддерживает b/g/n, чтобы быть совместимым с более старым оборудованием и охватывать широкий спектр устройств. 
        Протоколы b и g остаются актуальными для работы с устаревшими клиентами или в условиях слабого сигнала (802.11b, например, 
        имеет лучший радиус действия за счет низкой скорости).
    
    
    * Современные протоколы:
        На момент 2024 года более современные стандарты Wi-Fi, такие как 802.11ac (Wi-Fi 5) и 802.11ax (Wi-Fi 6),
        обеспечивают значительно большую скорость и надежность, но ESP32 ориентирован на компактные и энергоэффективные IoT-устройства, 
        где этих функций часто бывает достаточно.


    Помимо этого ESP32 поддерживает два режимы работы, касательно ширины канала :
        1. HT20 (20МГц) - 75 Мбит/сек (при n протоколе)
        2. HT40 (40МГц) - 150 Мбит/сек (при n протоколе)
    Это очень удобно и является значительным преимуществом над ESP8266, у которого только один режим рабоыт ширины канала(20МГц).
    Тут все схоже, опять таки с TCP/UDP и ранне упомянутых Bluetooth режимах BR/EDR.

    Используются режимы, в зависимоси от количества устройств, находящихся рядом и которые способны нам помешать и создать помехи.

    Если устройств мало - включаем режим HT40 и быстро передаем данные.
    Если устойств много и они могут создать нашему сигналу помехи - то включаем HT20 и переадем хоть медленне, но надежней 





Датчик температуры 
    У ESP32 так же имеется встроенный датчик температуры, самого чипа ESP32. Мы в любой момент проверить температуру чипа и тем самым 
    избегать перенагреваний и сгораний.




Датчик Холла

	Датчик Холла в модуле ESP32
		Датчик Холла — это сенсор, который измеряет магнитное поле и может использоваться для обнаружения магнитных объектов или измерения магнитных полей.

	Как работает датчик Холла?
		Датчик Холла использует эффект Холла — явление, при котором в проводнике, по которому проходит ток, появляется поперечное напряжение (называемое напряжением 		Холла), если на проводник воздействует магнитное поле. Это напряжение пропорционально величине магнитного поля.

	Датчик Холла в ESP32:
		ESP32 имеет встроенный датчик Холла для измерения магнитных полей. Он представляет собой аналоговый датчик и может использоваться для различных задач, 			например:
			* Определение положения магнитных объектов.
			* Измерение изменений магнитного поля (например, для индукционных датчиков).
			* Ориентация устройства по магнитному полю Земли.

	Основные характеристики:
		1.Аналоговый выход: Датчик выдает аналоговый сигнал, пропорциональный интенсивности магнитного поля.

		2.Встроенная возможность измерения: В отличие от внешних датчиков, ESP32 имеет встроенный датчик Холла, что снижает потребность в дополнительных компонентах 		для базовых приложений.

		3.Возможности калибровки: Для получения точных данных датчик может требовать калибровки, так как его выходное напряжение зависит от положения чипа ESP32 и 		окружающих магнитных полей.






Обо всех основных и возможных датчиках в ESP32:

	1. Датчик Холла
		Описание: Измеряет интенсивность магнитного поля, используя эффект Холла.
		Применение: Обнаружение магнитных объектов, измерение магнитных полей, создание компасов и датчиков оборотов.
	2. Температурный датчик (встроенный датчик температуры)
		Описание: Используется для измерения температуры внутри чипа.
		Применение: Мониторинг температуры ESP32, обнаружение перегрева, создание погодных станций.
	3. Датчик напряжения (встроенный в чип)
		Описание: Измеряет напряжение питания модуля.
		Применение: Отслеживание состояния батареи, мониторинг источников питания.
	4. Датчик освещённости (фотосенсор)
		Описание: Чувствителен к изменению светового потока.
		Применение: Используется для измерения уровня освещенности в окружающей среде, для управления освещением в умных домах.
	5. Датчик влажности (внешний датчик)
		Описание: ESP32 может работать с внешними датчиками влажности (например, DHT22 или DHT11), которые подключаются через GPIO.
		Применение: Измерение влажности воздуха, создание метеостанций, контроль в сельском хозяйстве, умные термостаты.
	6. Датчик акселерометра (внешний)
		Описание: Внешний датчик для измерения ускорения и наклона, может быть использован для обнаружения движения.
		Применение: Управление жестами, устройства мониторинга, спортивные устройства для отслеживания движений.
	7. Гироскоп (внешний)
		Описание: Измеряет угловое ускорение.
		Применение: Применяется в робототехнике, дроноводении, стабилизации камер и сенсорах ориентации.
	8. Микрофон (внешний датчик)
		Описание: ESP32 поддерживает подключение микрофона через аудиовход.
		Применение: Запись звука, голосовые команды, аудиоизмерения, системы распознавания голоса.
	9. Датчик давления (внешний датчик)
		Описание: Измеряет атмосферное давление.
		Применение: Метеорология, определение высоты, прогнозирование погоды, в том числе для дронов и автомобилей.
	10. Датчик качества воздуха (внешний датчик)
		Описание: Модуль может работать с датчиками качества воздуха, например, с датчиками CO2, MQ-сенсорами.
		Применение: Контроль загрязнённости воздуха, создание умных систем вентиляции, мониторинг экологии.


















Поддержка интерфейса Ethernet MAC Interface






CAN - шина 






Шифрование на ESP32 
	ESP32 поддерживает шифрование, что повышает его безопасность и говорит о его возможности применяться в реальных проектах.






Физический ШИМ 
	У ESP32 присутствует 16 ШИМ каналов, из которых один - физический. Что это обозначает ? 




Двух ядерность ESP32 и возможности, которые она открывает
	У ESP32 два ядра, вместо одного. Одно ядро занимается связью с внешним миром, а второе выполняет загруженную программу. Так же у ESP32 240 МГц, 2 двенадцети-разрядных 	АЦП на 12 каналов , 36 GPIO выводов, два I2C и SPI вывода, 16 ШИМ каналов, один физический.





Программирование ESP32


	В Arduino IDE 

		У ESP32 есть официальная среда разработки от Espressif, которая более профессиональная, но иногда удобно и уместно использовать среду разработки Arduino IDE, 		которая 
		более простая в использовании и для людей, которые уже ею пользовались - более привычная. 
	

		Чтобы программировать ESP32 в Arduino IDE нам нужно выполнить следующие шаги :
		В верхнем меню переходим в: файл->параметры и вы секции "Дополнительные ссылки для Менеджера плат" вставляем следующую ссылку: 
			https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

		Если же там уже есть какая-то ссылка - то ставим запятую и вставляем данную.

		Далее переходим во вкладку менеджера файлами (она находится слева, как иконка между иконками папки и книжек). И там уже в поиске Type: вбиваем "esp32" и в 		доступных вариантах выбиваем пакет под название "esp32" под издательством "Espressif System" и скачиваем.
		Затем нужно перезагрузить Arduino IDE и выбрать свой модуль (например ESP32 Dev Module) и порт, к которому она подключена.
		После в верхнем левом углу выбираем: файлы -> примеры и можем выбрать и посмотреть на любой пример реализации кода.


	PlatformIO (на базе VS Code)
		Для тех у кого установленная VS Code IDE есть хорошая новость - у вас есть возможность работать напрямую с ESP32 через интегрированную в IDE PlatformIO, что 
		очень удобно и позволяет пользоваться многими. 
		Для использования просто нажмите CTRL+Shift+X или перейдите на влкадку предложений и вбейте в поиск "PlatformIO", затем скачайте и у вас должна появится 		иконка по типу инопланетянина - перезагрузите VS Code. 
		Затем можете переходить на иконку и создавать новый проект, выбрав практически любую плату или чип/микроконтроллер, затем можно выбрать самостоятельно 
		фреймверк или использовать тот, который нам автоматически подобрало.

		После выбора всех настроек у вас откроется уже готовая структура проекта и вы сможете писать код прямо в VS Code !
		После интеграции PlatformIO в VS Code у вас будет удобная, мощная среда разработки с возможностями для работы с микроконтроллерами, такими как ESP32. Это 		особенно полезно для больших проектов благодаря таким функциям, как управление зависимостями, отладка и автодополнение.


	ESP-IDF (Espressif IoT Development Framework)
		Это официальная среда разработки от Espressif, предназначенная для профессионального использования. Она даёт полный контроль над ESP32 и доступ ко всем его 		возможностям.

		Почему выбрать ESP-IDF:
			* Полный доступ к низкоуровневым функциям ESP32.
			* Инструменты для профессиональной разработки.
			* Поддержка FreeRTOS.
			* Как настроить ESP-IDF:
			* Скачайте и установите ESP-IDF по официальным инструкциям.
			* Интегрируйте ESP-IDF с VS Code для удобства.


		Интегрированность в VS Code 
			Что примечательно и похвально, что и ESP-IDF интегрирован в VS Code и устанавливается так же, как и PlatformIO - как внутренняя программа, которую 
			можно скачать с помощью внутренней вкладки Extensions (находится слева, как иконка кубиков). 
			После установки появляется соответствующая иконка. 
