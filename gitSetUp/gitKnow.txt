GIT туториал 

    Здесь я рассмотрю основные проблемы, с которыми мне пришлось столкунться, по ходу работы с GIT.



    GIT: enter User-nickname and User-password 

        На данный этап мне пришлось потрать пару часов, т.к я не понимал почему GIT выдает мне ошибку, при казалось бы
        корректном вводе данных (пароля и ник-нейма). Я и прееходмл на сайт и пробывал ввойти под теми же данными - все 
        получалось и менял пароль на другой, и удалял и создавал новые репозитории - но в консоли продолжало выдавать ошибку.

        Проблема оказалась в том, что у GIT истек строк времени SSH-ключа и мне нужно было его обновить.
        Для этого пройдемся по инструкции, найденной мной в интернете:

        1. Создание SSH-ключа 
            ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
            
            Замените your_email@example.com на адрес электронной почты, связанный с вашим GitHub-аккаунтом.

        2. Назначение директории 
            Вам должно показаться подобное сообщение: 
                Generating public/private rsa key pair.
                Enter file in which to save the key (~.ssh/id_rsa): 
            Нажмите Enter, если хотите размещение SSH-keys по данному пути, либо же
            введиет собсвенный.

            После чего вам предложат ввести секретную фразу, которую вы бы вводили вместо длинного, приватного ssh-ключа.
            Если вы единственный пользователь системы - можете просто нажать Enter и затем повторить - это и будет вашей 
            фразей.
            Пример сообщения: 
                Enter passphrase for "/home/ivan/.ssh/id_new_rsa" (empty for no passphrase):

        3. Добавление SSH-ключа 

            После того как мы его успешно сгенерировали мы делаем следующее: 
            Добавляем ключ: 
                ssh-add ~/.ssh/id_rsa
            Копируем ключ: 
                cat ~.ssh/id_rsa.pub
            Скопируйте весь ответ, который вам вышел и перейдите в GIT настройки, найдите SSH-Create или что-то по типу 
            такого и создайте SSH-ключ с любым названием и в поле "Key" вставьте скопированный публичный-ключ.

            Затем уюедитесь в правильности настройки: 
                ssh -T git@github.com
                Пример вывода:
                    Hi ivan! You've successfully authenticated, but GitHub does not provide shell access.

            Дальше нам осталось убедиться в том что мы и наш репозиторий будут работать имеенно по ssh-каналу, для этого 
            используем комманду, внутри нашей папки (где уже проинициализирован и настроен репозиторий )
                git remote -v 
            Это нам выдаст две ссылки - fetch и push.
            Пример: 
                origin  https://github.com/ivan/forMe (fetch)
                origin  https://github.com/ivan/forMe (push)

            Тут мы видим что они используют HTTP канал - что нам не подойдет, поэтому мы переходим на сайт GIT и в наш репозитрорий, 
            на главной странице(Code) ищем вкладку "Code" (светится зеленым) и копируем ssh-ссылку, которую затем в нашей директории 
            вставляем в комманду: 
                git remote set-url origin git@github.com:ivan/forMe.git 
            И затем провряем вновы: 
                git remote -v
                Коректный ответ:
                    origin  git@github.com:ivan/forMe.git (fetch)
                    origin  git@github.com:ivan/forMe.git (push)

 

    GIT: настройка пользователя 

        Иногда мы можем замечать, что все изменения на репозитории идут не от нашего пользователя, которого мы хотим, а 
        от, например, основного GIT-пользователя, который прописан в глобальных системах. 
        Чтобы это избежать давайте добавим в наш репозиторий пользвоателя, который будет все это делать от своего лица.

        Проверка пользвоателя ситсемы: 
            git config --global user.name
            git config --global user.email

        Настройка пользователя конкретной директори (отвечает за конкретный репозиторий):
            git config user.name "Правильное Имя"
            git config user.email "правильный_емейл@example.com"

        Затем можем проверить: 
            git config user.name 
            git config user.email


 

            
